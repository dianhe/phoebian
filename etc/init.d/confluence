#! /bin/bash

### BEGIN INIT INFO
# Provides:        confluence
# Required-Start:    $local_fs $network $ssh $remote_fs postgresql
# Required-Stop:    $local_fs $network $ssh $remote_fs postgresql
# Default-Start:    2 3 4 5
# Default-Stop:        0 1 2 6
# Short-Description:    Confluence
### END INIT INFO
#chkconfig: 2345 80 05
#    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8086 -Dcom.sun.management.jmxremote.authenticate=false"
#    JAVA_OPTS="$JAVA_OPTS -Xloggc:/var/local/confluence/logs/$GC_LOG -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+HeapDumpOnOutOfMemoryError"
#    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=1101"

# Instance name is the name of the file, this allows you to create multiple instancess using just symlinks
NAME=`basename $0`
STAMP=`date -u +"%Y%m%d-%H%M%S"`
export NEW_RELIC_APP_NAME=$NAME

if test -f /etc/default/$NAME; then
    . /etc/default/$NAME
fi 

if [ -f "/lib/lsb/init-functions" ]; then
    . /lib/lsb/init-functions
else # this is for OS X where we do not have them, copy the jira to ~/bin
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    . ${DIR}/lib/lsb/init-functions
fi

function_exists() {
    declare -f -F $1 > /dev/null
        return $?
        }

shopt -s expand_aliases
function_exists log_daemon_msg || alias log_daemon_msg=echo
function_exists log_action_msg || alias log_action_msg=echo
function_exists log_progress_msg || alias log_progress_msg=echo
function_exists log_eng_msg || alias log_end_msg=echo

#JAVA_OPTS="$JAVA_OPTS -XX:OnOutOfMemoryError=\"kill -9 %p\" "
# NOTE: Do not rely on any previously configured JAVA_OPTS.
export JAVA_OPTS=""
start_time=`date +%s`

function moveallto() {
    local DESTDIR=${1}
    su - -c "mkdir -p ${DESTDIR}" ${RUN_AS_USER}
    find . -maxdepth 1 -type f -not -name ${DESTDIR} -not -path "./${DESTDIR}/*" -exec mv '{}' "${DESTDIR}/{}" \;
}

TIMEOUT=30
OUTPUT=$(mktemp)
# number of seconds to wait before forcing a stop command

if [ -f /usr/libexec/java_home ]; then
export JAVA_HOME=$(/usr/libexec/java_home)
else
  # detect java location
  if [ -z "${JAVA_HOME+zzz}" ] || [ "${JAVA_HOME+xxx}" = "xxx" ]; then
    for JAVA_HOME in /usr/lib/jvm/java-8-oracle /usr/lib/jvm/java-7-oracle /usr/lib/jvm/java /usr/lib/jvm/default-java /usr/lib/jvm/java-6-sun /System/Library/Frameworks/JavaVM.framework/Home/
    do
        if [ -d "$JAVA_HOME" ]; then break ; fi
    done
  fi
fi
export JAVA_HOME

if [ "${JAVA_HOME}" = "" ] || [ ! -d "$JAVA_HOME" ] ; then
  echo "Failed to detect JAVA_HOME location, we cannot proceed ($JAVA_HOME)."
  exit 1
fi

# detect product location 
# list of possible locations of confluence, newer versions do have priority, if you have another location just overwrite this or make a symlink 
for ROOT_DIR in /opt/atlassian/$NAME/bin /opt/$NAME/bin  ~/opt/$NAME/bin /opt/atlassian/$NAME/apache-tomcat/bin
do
    if [ -d "$ROOT_DIR" ]; then break ; fi
done
if [[ ! -e "$ROOT_DIR/startup.sh" ]] ; then
  if [[ ! -e "$ROOT_DIR/start.sh" ]] ; then
      echo "FATAL: Unable to detect confluence install directory."
      exit 1
  fi
fi

# TODO: replace HOME detection with reading from config files of the services
for SERVICE_HOME in  /var/atlassian/application-data/$NAME ~/var/local/$NAME /var/local/$NAME
do
    if [ -d "$SERVICE_HOME" ]; then break ; fi
done
test -x "${SERVICE_HOME}" || { echo "FATAL: SERVICE_HOME=${SERVICE_HOME} but it doesn't exist." ; exit 1; }

if [[ $SERVICE_HOME == *confluence* ]]
then
    export CONFLUENCE_HOME="${SERVICE_HOME}"
    if [[ ! -f "$CONFLUENCE_HOME/confluence.cfg.xml" ]] ; then 
        echo "FATAL: Unable to detect confluence home directory. ($CONFLUENCE_HOME)"
        exit 1
    fi
    test -x "${ROOT_DIR}/startup.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/startup.sh" ; exit 1; }
    test -x "${ROOT_DIR}/shutdown.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/shutdown.sh" ; exit 1; }

    RUN_AS_USER=confluence
    su - -c "mkdir -p ${SERVICE_HOME}/logs" ${RUN_AS_USER}
    SERVICE_LOG_DIR=logs
    PROXYNAME=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*proxyName="\([^"]*\)".*/\1/p' | head -n 1`
    SCHEME=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*scheme=\"\([^"]*\)\".*/\1/p' | head -n 1`
    PORT=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*<Connector.*port="\([^"]*\)".*/\1/p' | head -n 1`
    PROXYPORT=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*proxyPort="\([^"]*\)".*/\1/p' | head -n 1`
fi
if [[ $SERVICE_HOME == *jira* ]]
then
    test -x "${ROOT_DIR}/startup.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/startup.sh" ; exit 1; }
    test -x "${ROOT_DIR}/shutdown.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/shutdown.sh" ; exit 1; }

    # empty jira ugly banner
    echo "" > ${ROOT_DIR}/jirabanner.txt
    SERVICE_LOG_DIR=log
    RUN_AS_USER=jira
    export JIRA_HOME="${SERVICE_HOME}"
    PROXYNAME=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*proxyName="\([^"]*\)".*/\1/p' | head -n 1`
    SCHEME=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*scheme=\"\([^"]*\)\".*/\1/p' | head -n 1`
    PORT=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*<Connector.*port="\([^"]*\)".*/\1/p' | head -n 1`
    PROXYPORT=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*proxyPort="\([^"]*\)".*/\1/p' | head -n 1`
fi
if [[ $SERVICE_HOME == *crowd* ]]
then
    test -x "${ROOT_DIR}/startup.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/startup.sh" ; exit 1; }
    test -x "${ROOT_DIR}/shutdown.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/shutdown.sh" ; exit 1; }

    SERVICE_LOG_DIR=log
    RUN_AS_USER=crowd
    export CATALINA_HOME="${SERVICE_HOME}"
    PROXYNAME=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*proxyName="\([^"]*\)".*/\1/p' | head -n 1`
    SCHEME=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*scheme=\"\([^"]*\)\".*/\1/p' | head -n 1`
    PORT=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*<Connector.*port="\([^"]*\)".*/\1/p' | head -n 1`
    PROXYPORT=`cat "${ROOT_DIR}/../conf/server.xml" | sed -ne 's/.*proxyPort="\([^"]*\)".*/\1/p' | head -n 1`

fi
if [[ $SERVICE_HOME == *fisheye* ]]
then
    test -x "${ROOT_DIR}/start.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/start.sh" ; exit 1; }
    test -x "${ROOT_DIR}/stop.sh" || { echo "FATAL: Unable to find ${ROOT_DIR}/stop.sh" ; exit 1; }

    SERVICE_LOG_DIR=log
    RUN_AS_USER=fisheye
    export CATALINA_HOME="${SERVICE_HOME}"
    export FISHEYE_INST=${SERVICE_HOME}
    PROXYNAME=`cat "${SERVICE_HOME}/config.xml" | sed -ne 's/.*proxy-host="\([^"]*\)".*/\1/p' | head -n 1`
    SCHEME=`cat "${SERVICE_HOME}/config.xml" | sed -ne 's/.*proxy-scheme=\"\([^"]*\)\".*/\1/p' | head -n 1`
    PORT=`cat "${SERVICE_HOME}/config.xml" | sed -ne 's/.*<http.*bind=":\([^"]*\)".*/\1/p' | head -n 1`
    PROXYPORT=`cat "${SERVICE_HOME}/config.xml" | sed -ne 's/.*proxy-port="\([^"]*\)".*/\1/p' | head -n 1`
    JMXPORT=$((PORT+1))
    export FISHEYE_OPTS="-Xmx3000m -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${JMXPORT} -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 "

fi

#echo ${SERVICE_HOME}

# read the address where the service is supposed to respond

if [[ -z "$PROXYNAME" ]] ; then PROXYNAME=localhost ; fi
if [[ -z "$SCHEME" ]] ; then SCHEME=http ; fi
if [[ -z "$PROXYPORT" ]] ; then PROXYPORT=80 ; fi

URL=${SCHEME}://${PROXYNAME}:${PROXYPORT}

# creating the output file
echo "Supposed to run on port $PORT and be accesible using $URL" >${OUTPUT}

if test -f /etc/default/$NAME; then
    . /etc/default/$NAME
fi



clean_exit() {
  zero=0
  if [ $1 -ne $zero ]; then
    # we display the output only in case of error
    cat ${OUTPUT}
  fi
  rm -f ${OUTPUT} || echo error
  exit $1
}

function exit_if_maintenance() {
  if [ -f "${ROOT_DIR}/../.maintenance" ]; then
    log_progress_msg "Doing nothing as the systems seems to be in maintenance mode."
    log_end_msg 1
    return 1
  fi
  return 0
}


function get_PID() {
    PID=`ps -A -o pid,command |grep java|grep "$ROOT_DIR"|awk '{print $1}'`
}

function wait_to_end() {
            get_PID
            echo PID=${PID}
            t=$TIMEOUT
            while [ "$t" -gt "0" ] && [ -n "$PID" ]; do
                echo -n "."
                sleep 1
                get_PID
                t=$(( t - 1 ))
            done
            get_PID
}


function daemon_start() {
        # rotating the logs, so we get an empty set for each restart

        if [[ -d "$ROOT_DIR/../logs" ]] ; then
          pushd "$(pwd)" >> /dev/null
          cd "$ROOT_DIR/../logs"
          moveallto $ROOT_DIR/../logs/$STAMP
          popd >> /dev/null

          daemon_clean

          # rotating the logs, so we get an empty set for each restart
          su - -c "mkdir -p $SERVICE_HOME/$SERVICE_LOG_DIR" ${RUN_AS_USER}
          pushd "$(pwd)" >> /dev/null
          cd "$SERVICE_HOME/$SERVICE_LOG_DIR"
          moveallto $STAMP
          popd >> /dev/null
        fi


    if [[ $NAME == *jira* ]] ; then
      su - -c "mkdir -p $JIRA_HOME/import/attachments" ${RUN_AS_USER} 
      su - -c "mkdir -p $JIRA_HOME/import/mail"  ${RUN_AS_USER}
      su - -c "mkdir -p $JIRA_HOME/caches/indexes/entities/portalpage" ${RUN_AS_USER}

      if "${ROOT_DIR}/start-jira.sh" 2>&1 >>${OUTPUT} ; then
        log_end_msg 0
      else
        log_end_msg 1
      fi
    elif [[ $NAME == *confluence* ]] ; then
      rm -rf $CONFLUENCE_HOME/plugins-osgi-cache/*
      rm -rf $CONFLUENCE_HOME/bundled-plugins/*
      rm -rf $CONFLUENCE_HOME/plugins-temp/*
      rm -rf $CONFLUENCE_HOME/plugins-cache/*
      if "${ROOT_DIR}/start-confluence.sh" 2>&1 >>${OUTPUT} ; then
        log_end_msg 0
      else
        log_end_msg 1
      fi
    elif [[ $NAME == *fisheye* ]] ; then
      # this is essential for making ssh work (git clone....)
      ssh-add
      if "${ROOT_DIR}/start.sh" 2>&1 >>${OUTPUT} ; then
        log_end_msg 0
      else
        log_end_msg 1
      fi
       
    fi
    cat ${OUTPUT}

}

function tdumper() {
  # $1 should be the name of the dump
  if [ -z "$2" ] && [ "${2+xxx}" = "xxx" ]; 
  then
  delay=0
  else
  delay=$2
  fi

  get_PID
  if [ -n "$PID" ] ; then
    if which jstack >/dev/null ; then
      DUMP="${ROOT_DIR}/../logs/$1"
      #echo "---" 
       #>> ${DUMP}
      #echo "dumping ${DUMP}..."
      su - -c "jstack -l $PID  >> ${DUMP}" ${RUN_AS_USER} || echo "jstack failed"
    else
      echo "WARN: jstack not found, skipping thread dumping."
    fi
  fi
}


function daemon_stop() {
    log_progress_msg " normal shutdown "
    # this one is very usefull 
    tdumper "threaddump.0.pre-shutdown.tdump"

    if [[ $NAME == *fisheye* ]] ; then
      # important to reset them because stop process can fail due to them
      export FISHEYE_OPTS=""
      SHUTDOWN_CMD="${ROOT_DIR}/stop.sh"
    else
      SHUTDOWN_CMD="${ROOT_DIR}/shutdown.sh"
    fi

    SHUTDOWN=1 ${SHUTDOWN_CMD} || true
    wait_to_end
        if [ -n "$PID" ]; then
            tdumper "threaddump.1.post-shutdown.tdump"
            log_progress_msg " forced shutdown (20) "
            SHUTDOWN=1 "${ROOT_DIR}/shutdown.sh" 20 -force  || true
            tdumper "threaddump.2.post-forced-shutdown.tdump"
            wait_to_end
            if [ -n "$PID" ]; then
                    log_progress_msg " killing $PID "
                    tdumper "threaddump.3.post-forced-shutdown.tdump"
                    kill -9 $PID
                    wait_to_end
            fi
        fi
}

function daemon_clean() {

    if [[ $NAME == *confluence* ]] ; then
       for DIR in /index/plugin /index/edge /index/questions-edge /journal
       do
          rm ${SERVICE_HOME}$DIR/* || echo "failed"
       done
    fi
    if [[ $NAME == *jira* ]] ; then
        # DO NOT REMOVE ${JIRA_HOME}/caches/indexes !!! can mean hours of downtime
        rm -rf ${JIRA_HOME}/plugins/.bundled-plugins/* \
       	   ${JIRA_HOME}/plugins/.osgi-plugins/* \
	   ${JIRA_HOME}/tmp/* \
	   ${ROOT_DIR}/../work/* \
	   ${ROOT_DIR}/../temp/* || echo error
    fi
}

case "$1" in
  start)
    log_daemon_msg "INFO: Starting $NAME instance" "$NAME"
    daemon_start

    ;;
  stop)
    log_daemon_msg "INFO: Stopping $NAME instance" "$NAME"
    touch "$HOME/.maintenance"
    [[ ! -z "$MAILTO" ]] && mail -s "service $NAME stop" $MAILTO <<EOF
    service $NAME stop
    Reason: ${@:2}
EOF
    #enable_maintenance
    daemon_stop
    log_end_msg 0
    ;;
  clean)
    # daemon_clean is already part of the daemon_start, but it is here just for covenience
    daemon_stop
    daemon_clean
    ;;

  dump)
    get_PID
    if [ -n "$PID" ] ; then
      echo "INFO: Creating 3 thread dumps at 20 seconds interval, so you can send them to Atlassian Support, if JIRA goes crazy"
      tdumper "dump-0.tdump" 20
      tdumper "dump-1.tdump" 20
      tdumper "dump-2.tdump" 20
    else
      echo "WARN: No PID found."
      exit 2
    fi
    echo "INFO: done"
    ;;

  status)
    status_of_proc -p $ROOT_DIR/../work/catalina.pid "java" "$NAME" && exit 0 || exit $?
    ;;

  restart)
    log_daemon_msg "Restarting $NAME instance" "$NAME"

    # if someone stopped service on purpose (with stop) we will not start it with restart as we consider to be in maintenance mode.
    # This allows us to restart service using nagios when it stops responding, as long it wasn't stopped on purpose.
    #if exit_if_maintenance; then
    #    clean_exit 1
    #else
        touch "$HOME/.maintenance"
        daemon_stop
        daemon_start
        echo "run time is $(expr `date +%s` - $start_time)s ... stil it could take few minutes until the service is fully up."
    #fi
    ;;
  *)
    log_action_msg "Usage: /etc/init.d/$NAME {start|stop|clean|restart|status|dump}" || true
    clean_exit 1
    ;;
esac

clean_exit 0
